{
	"info": {
		"_postman_id": "4d8e4ed0-12be-401d-9d7b-5f121cd645e3",
		"name": "SAFE-DEAL-BRAIN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4618509",
		"_collection_link": "https://safe-deal.postman.co/workspace/SafeDeal~f2996930-901c-4b7b-8538-26259ccf2cfd/collection/4618509-4d8e4ed0-12be-401d-9d7b-5f121cd645e3?action=share&source=collection_link&creator=4618509"
	},
	"item": [
		{
			"name": "Think",
			"item": [
				{
					"name": "/think - Amazon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Images array should not be empty\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.product.images).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Images array should not be empty\");",
									"});",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(40000);",
									"});",
									"",
									"pm.test(\"Validate the schema\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  const tests = [",
									"    {",
									"      key: 'product',",
									"      properties: [",
									"        { key: 'id', type: 'string' },",
									"        { key: 'category', type: 'string' },",
									"        { key: 'source', type: 'string' },",
									"        { key: 'domain', type: 'string' },",
									"        { key: 'title', type: 'string' },",
									"        { key: 'conclusion', type: 'string' },",
									"        { key: 'images', type: 'array' },",
									"        { key: 'locale', type: 'string', value:'en' },",
									"        { key: 'product', type: 'object' },",
									"        { key: 'description', type: 'string' },",
									"        { key: 'rules', type: 'array' },",
									"        { key: 'ver', type: 'string' }",
									"      ]",
									"    },",
									"    {",
									"      key: 'reviews',",
									"      properties: [",
									"        { key: 'reviewsSummary', type: 'array' },",
									"        { key: 'error', type: 'null' },",
									"        { key: 'reviewsImages', type: 'array' },",
									"        { key: 'ver', type: 'string' },",
									"        { key: 'totalReviews', type: 'string' },",
									"        { key: 'rating', type: 'string' }",
									"      ]",
									"    },",
									"    {",
									"      key: 'product.product.price',",
									"      properties: [",
									"        { key: 'currency', type: 'string' },",
									"        { key: 'maxPrice', type: 'number' },",
									"        { key: 'minPrice', type: 'number' },",
									"        { key: 'price', type: 'array' }",
									"      ],",
									"      subproperties: [",
									"        { key: 'date', type: 'string' },",
									"        { key: 'price', type: 'number' },",
									"        { key: 'minPrice', type: 'number' },",
									"        { key: 'maxPrice', type: 'number' }",
									"      ]",
									"    }",
									"  ];",
									"",
									"  tests.forEach(test => {",
									"    const object = test.key.split('.').reduce((o, i) => o ? o[i] : undefined, responseData);",
									"    pm.test(`Validate the \"${test.key}\" schema`, function () {",
									"      pm.expect(object).to.be.an('object', `\"${test.key}\" object is missing or not an object`);",
									"      test.properties.forEach(prop => {",
									"        if (prop.key === 'price' && Array.isArray(object[prop.key])) {",
									"          object[prop.key].forEach((subItem, index) => {",
									"            test.subproperties.forEach(subprop => {",
									"              pm.test(`Property \"${test.key}[${index}]\" => \"${subprop.key}\" is of type ${subprop.type}`, function () {",
									"                pm.expect(subItem[subprop.key]).to.exist.and.to.be.a(subprop.type, `Property \"${test.key}[${index}]\" => \"${subprop.key}\" is missing or not a ${subprop.type}`);",
									"              });",
									"            });",
									"          });",
									"        } else {",
									"\t\t\t\t\tpm.test(`Property \"${test.key}\" => \"${prop.key}\" is of type ${prop.type}`, function () {",
									"\t\t\t\t\t\tif (prop.type === 'null') {",
									"\t\t\t\t\t\t\tpm.expect(object[prop.key]).to.equal(null, `Property \"${test.key}\" => \"${prop.key}\" should be null but is not`);",
									"\t\t\t\t\t\t} else {",
									"\t\t\t\t\t\t\tpm.expect(object[prop.key]).to.exist.and.to.be.a(prop.type, `Property \"${test.key}\" => \"${prop.key}\" is missing or not a ${prop.type}`);",
									"              if (prop.value) {",
									"                pm.expect(object[prop.key]).to.equal(prop.value, `Property \"${test.key}\" => \"${prop.key}\" does not have the expected value ${prop.value}`);",
									"              }",
									"\t\t\t\t\t\t}",
									"\t\t\t\t\t});",
									"        }",
									"      });",
									"    });",
									"  });",
									"\t",
									"  pm.test(\"Property wasCashed is a boolean value\", function () {",
									"    pm.expect(responseData.wasCashed).to.be.a('boolean', 'Property \"wasCashed\" is not a boolean or missing');",
									"  });",
									"",
									"  pm.test(\"Validate the error schema\", function () {",
									"    pm.expect(responseData.error).to.equal(null,'Property \"error\" should be null but is not');",
									"  });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "api-key",
								"value": "EsAwC9Fq4EhvhrQnVQxrqMN23GJs1CiwpseZapTlf5M-brn",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{safe_deal_domain}}/think?url=https://www.amazon.com/dp/B0CKLZJF2D",
							"host": [
								"{{safe_deal_domain}}"
							],
							"path": [
								"think"
							],
							"query": [
								{
									"key": "url",
									"value": "https://www.amazon.com/dp/B0CKLZJF2D"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/think - Amazon He",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Images array should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.product.images).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Images array should not be empty\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "api-key",
								"value": "EsAwC9Fq4EhvhrQnVQxrqMN23GJs1CiwpseZapTlf5M-brn",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{safe_deal_domain}}/think?url=https://www.amazon.com/dp/B0BTBX691N&lang=he&regenerate=true",
							"host": [
								"{{safe_deal_domain}}"
							],
							"path": [
								"think"
							],
							"query": [
								{
									"key": "url",
									"value": "https://www.amazon.com/dp/B0BTBX691N"
								},
								{
									"key": "lang",
									"value": "he"
								},
								{
									"key": "regenerate",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/think - AliExpress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Product ID should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.product.id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Description is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.product.description).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Images array should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.product.images).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "api-key",
								"value": "EsAwC9Fq4EhvhrQnVQxrqMN23GJs1CiwpseZapTlf5M-brn",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{safe_deal_domain}}/think?url=https://www.aliexpress.com/item/2251832747235510.html",
							"host": [
								"{{safe_deal_domain}}"
							],
							"path": [
								"think"
							],
							"query": [
								{
									"key": "url",
									"value": "https://www.aliexpress.com/item/2251832747235510.html"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/think - AliExpress.ru",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Product ID should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.product.id).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Description is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.product.description).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Images array should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.product.images).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "api-key",
								"value": "EsAwC9Fq4EhvhrQnVQxrqMN23GJs1CiwpseZapTlf5M-brn",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{safe_deal_domain}}/think?url=https://aliexpress.ru/item/32933550262.html",
							"host": [
								"{{safe_deal_domain}}"
							],
							"path": [
								"think"
							],
							"query": [
								{
									"key": "url",
									"value": "https://aliexpress.ru/item/32933550262.html"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/think - eBay",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "api-key",
								"value": "EsAwC9Fq4EhvhrQnVQxrqMN23GJs1CiwpseZapTlf5M-brn",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{safe_deal_domain}}/think?url=https://www.ebay.com/itm/373760959244",
							"host": [
								"{{safe_deal_domain}}"
							],
							"path": [
								"think"
							],
							"query": [
								{
									"key": "url",
									"value": "https://www.ebay.com/itm/373760959244"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Extract",
			"item": [
				{
					"name": "/extract - AliExpress cssSelector",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is text/html\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});",
									"",
									"pm.test(\"Selecotor [data-pl] Exist\", function () {",
									"    const responseText = pm.response.text();",
									"    ",
									"    pm.expect(responseText).to.include(\"data-pl\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "api-key",
								"value": "EsAwC9Fq4EhvhrQnVQxrqMN23GJs1CiwpseZapTlf5M-brn",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{safe_deal_domain}}/extract?url=https://www.aliexpress.com/item/2251832747235510.html&waitForCssSelector=[data-pl]",
							"host": [
								"{{safe_deal_domain}}"
							],
							"path": [
								"extract"
							],
							"query": [
								{
									"key": "url",
									"value": "https://www.aliexpress.com/item/2251832747235510.html"
								},
								{
									"key": "waitForCssSelector",
									"value": "[data-pl]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/extract - eBay",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is text/html\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "api-key",
								"value": "EsAwC9Fq4EhvhrQnVQxrqMN23GJs1CiwpseZapTlf5M-brn",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{safe_deal_domain}}/extract?url=https://www.ebay.com/itm/373760959244",
							"host": [
								"{{safe_deal_domain}}"
							],
							"path": [
								"extract"
							],
							"query": [
								{
									"key": "url",
									"value": "https://www.ebay.com/itm/373760959244"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}